// Generated by Haxe 3.4.0
(function () { "use strict";
var Case14 = function() { };
Case14.main = function() {
	var a = { name : "a", children : []};
	var b = { name : "b", children : []};
	var c = { name : "c", children : []};
	var d = { name : "d", children : []};
	var e = { name : "e", children : []};
	var f = { name : "f", children : []};
	a.children.push(c);
	a.children.push(d);
	d.children.push(e);
	b.children.push(f);
	var ans = ["b","f","a","d","e","c"];
	var tar = $iterator(_$Pipeline_Pipeline_$Impl_$)(_$Pipeline_Pipeline_$Impl_$.explore(_$Pipeline_Pipeline_$Impl_$.open([a,b]),function(x) {
		return x.children;
	}));
	var _g = 0;
	while(_g < ans.length) {
		var x1 = ans[_g];
		++_g;
		if(!(tar.hasNext() && tar.next().name == x1)) {
			console.log("failed");
		}
	}
	if(!(!tar.hasNext())) {
		console.log("failed");
	}
};
var HxOverrides = function() { };
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var _$Pipeline_Pipeline_$Impl_$ = {};
_$Pipeline_Pipeline_$Impl_$.iterator = function(this1) {
	return $iterator(this1)();
};
_$Pipeline_Pipeline_$Impl_$.open = function(tar) {
	if(tar == null) {
		throw new Error("tar is null");
	}
	return tar;
};
_$Pipeline_Pipeline_$Impl_$.enumerate = function(begin,end) {
	if(begin >= end) {
		throw new Error("invalid range");
	}
	return { iterator : function() {
		var pos = begin;
		return { hasNext : function() {
			return pos < end;
		}, next : function() {
			pos += 1;
			return pos - 1;
		}};
	}};
};
_$Pipeline_Pipeline_$Impl_$.where = function(this1,pred) {
	if(this1 == null) {
		throw new Error("null ref");
	}
	if(pred == null) {
		throw new Error("pred is null");
	}
	return { iterator : function() {
		var fet = false;
		var nex = null;
		var itr = $iterator(this1)();
		var took = true;
		return { hasNext : function() {
			if(!took) {
				return fet;
			}
			took = false;
			while(true) {
				var tmp;
				fet = itr.hasNext();
				if(fet) {
					nex = itr.next();
					tmp = !pred(nex);
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
			}
			return fet;
		}, next : function() {
			if(!fet) {
				throw new Error("no next");
			}
			took = true;
			return nex;
		}};
	}};
};
_$Pipeline_Pipeline_$Impl_$.select = function(this1,selector) {
	if(this1 == null) {
		throw new Error("null ref");
	}
	if(selector == null) {
		throw new Error("selector is null");
	}
	return { iterator : function() {
		var fet = false;
		var nex = null;
		var itr = $iterator(this1)();
		var took = true;
		return { hasNext : function() {
			if(!took) {
				return fet;
			}
			took = false;
			fet = itr.hasNext();
			if(!fet) {
				return false;
			}
			var nex1 = itr.next();
			nex = selector(nex1);
			return true;
		}, next : function() {
			if(!fet) {
				throw new Error("no next");
			}
			took = true;
			return nex;
		}};
	}};
};
_$Pipeline_Pipeline_$Impl_$.join = function(this1,tar,join) {
	if(this1 == null) {
		throw new Error("null ref");
	}
	if(join == null) {
		throw new Error("join is null");
	}
	return { iterator : function() {
		var fet = false;
		var nex = null;
		var elx = null;
		var itrx = $iterator(this1)();
		var itry = null;
		var first = true;
		var took = true;
		return { hasNext : function() {
			if(!took) {
				return fet;
			}
			took = false;
			if(first || !itry.hasNext()) {
				first = false;
				fet = itrx.hasNext();
				if(!fet) {
					return false;
				}
				elx = itrx.next();
				itry = $iterator(_$Pipeline_Pipeline_$Impl_$)(tar);
			}
			fet = itry.hasNext();
			if(!fet) {
				return false;
			}
			var nex1 = itry.next();
			nex = join(elx,nex1);
			return true;
		}, next : function() {
			if(!fet) {
				throw new Error("no next");
			}
			took = true;
			return nex;
		}};
	}};
};
_$Pipeline_Pipeline_$Impl_$.apply = function(this1,com) {
	if(this1 == null) {
		throw new Error("null ref");
	}
	if(com == null) {
		throw new Error("com is null");
	}
	return { iterator : function() {
		var itr = $iterator(this1)();
		var nex = null;
		var fet = false;
		var took = true;
		return { hasNext : function() {
			if(!took) {
				return fet;
			}
			took = false;
			fet = itr.hasNext();
			if(!fet) {
				return false;
			}
			nex = itr.next();
			com(nex);
			return true;
		}, next : function() {
			if(!fet) {
				throw new Error("no next");
			}
			took = true;
			return nex;
		}};
	}};
};
_$Pipeline_Pipeline_$Impl_$.explore = function(this1,explorer) {
	if(this1 == null) {
		throw new Error("this is null");
	}
	if(explorer == null) {
		throw new Error("explorer is null");
	}
	return { iterator : function() {
		var stack = [];
		var x = $iterator(this1)();
		while(x.hasNext()) {
			var x1 = x.next();
			stack.push(x1);
		}
		return { hasNext : function() {
			return stack.length > 0;
		}, next : function() {
			if(stack.length <= 0) {
				throw new Error("no elem");
			}
			var ret = stack.pop();
			var child = explorer(ret);
			if(child != null) {
				var x2 = $iterator(child)();
				while(x2.hasNext()) {
					var x3 = x2.next();
					stack.push(x3);
				}
			}
			return ret;
		}};
	}};
};
_$Pipeline_Pipeline_$Impl_$.sort = function(this1,com) {
	if(this1 == null) {
		throw new Error("null ref");
	}
	if(com == null) {
		throw new Error("com is null");
	}
	return { iterator : function() {
		var ret = [];
		var x = $iterator(this1)();
		while(x.hasNext()) {
			var x1 = x.next();
			ret.push(x1);
		}
		ret.sort(com);
		return HxOverrides.iter(ret);
	}};
};
_$Pipeline_Pipeline_$Impl_$.skip = function(this1,count) {
	if(count < 0) {
		throw new Error("neg count");
	}
	return { iterator : function() {
		var itr = $iterator(this1)();
		var _g1 = 0;
		var _g = count;
		while(_g1 < _g) {
			var i = _g1++;
			if(!itr.hasNext()) {
				break;
			}
			itr.next();
		}
		return itr;
	}};
};
_$Pipeline_Pipeline_$Impl_$.limit = function(this1,count) {
	if(count < 0) {
		throw new Error("neg count");
	}
	return { iterator : function() {
		var itr = $iterator(this1)();
		var cur = 0;
		var nex = false;
		return { hasNext : function() {
			if(itr.hasNext()) {
				nex = cur < count;
			} else {
				nex = false;
			}
			return nex;
		}, next : function() {
			if(!nex) {
				throw new Error("no elem");
			}
			cur += 1;
			return itr.next();
		}};
	}};
};
_$Pipeline_Pipeline_$Impl_$.foreach = function(this1,com) {
	if(this1 == null) {
		throw new Error("null ref");
	}
	if(com == null) {
		throw new Error("com is null");
	}
	var x = $iterator(this1)();
	while(x.hasNext()) {
		var x1 = x.next();
		com(x1);
	}
};
_$Pipeline_Pipeline_$Impl_$.aggregate = function(this1,zero,agr,saf) {
	if(this1 == null) {
		throw new Error("null ref");
	}
	if(agr == null) {
		throw new Error("agr is null");
	}
	var ret = zero;
	var count = 0;
	var x = $iterator(this1)();
	while(x.hasNext()) {
		var x1 = x.next();
		ret = agr(ret,x1);
		++count;
	}
	if(saf != null) {
		return saf(ret,count);
	} else {
		return ret;
	}
};
_$Pipeline_Pipeline_$Impl_$.argmin = function(this1,$eval) {
	if(this1 == null) {
		throw new Error("null ref");
	}
	if($eval == null) {
		throw new Error("eval is null");
	}
	var itr = $iterator(this1)();
	if(!itr.hasNext()) {
		throw new Error("no elem");
	}
	var ret = null;
	var val = null;
	while(true) {
		var x = itr.next();
		var y = $eval(x);
		if(val == null || val > y) {
			ret = x;
			val = y;
		}
		if(!itr.hasNext()) {
			break;
		}
	}
	return ret;
};
_$Pipeline_Pipeline_$Impl_$.argmax = function(this1,$eval) {
	if(this1 == null) {
		throw new Error("null ref");
	}
	if($eval == null) {
		throw new Error("eval is null");
	}
	var itr = $iterator(this1)();
	if(!itr.hasNext()) {
		throw new Error("no elem");
	}
	var ret = null;
	var val = null;
	while(true) {
		var x = itr.next();
		var y = $eval(x);
		if(val == null || val < y) {
			ret = x;
			val = y;
		}
		if(!itr.hasNext()) {
			break;
		}
	}
	return ret;
};
_$Pipeline_Pipeline_$Impl_$.first = function(this1) {
	if(this1 == null) {
		throw new Error("null ref");
	}
	var itr = $iterator(this1)();
	if(!itr.hasNext()) {
		throw new Error("no first element");
	}
	return itr.next();
};
_$Pipeline_Pipeline_$Impl_$.last = function(this1) {
	if(this1 == null) {
		throw new Error("null ref");
	}
	var itr = $iterator(this1)();
	if(!itr.hasNext()) {
		throw new Error("no elem");
	}
	var ret;
	while(true) {
		ret = itr.next();
		if(!itr.hasNext()) {
			break;
		}
	}
	return ret;
};
_$Pipeline_Pipeline_$Impl_$.count = function(this1) {
	if(this1 == null) {
		throw new Error("null ref");
	}
	var ret = 0;
	var x = $iterator(this1)();
	while(x.hasNext()) {
		var x1 = x.next();
		++ret;
	}
	return ret;
};
_$Pipeline_Pipeline_$Impl_$.any = function(this1,pred) {
	if(this1 == null) {
		throw new Error("null ref");
	}
	if(pred == null) {
		throw new Error("pred is null");
	}
	var x = $iterator(this1)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(pred(x1)) {
			return true;
		}
	}
	return false;
};
_$Pipeline_Pipeline_$Impl_$.all = function(this1,pred) {
	if(this1 == null) {
		throw new Error("null ref");
	}
	if(pred == null) {
		throw new Error("pred is null");
	}
	var x = $iterator(this1)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(!pred(x1)) {
			return false;
		}
	}
	return true;
};
_$Pipeline_Pipeline_$Impl_$.toArray = function(this1) {
	if(this1 == null) {
		throw new Error("this is null");
	}
	var ret = [];
	var x = $iterator(this1)();
	while(x.hasNext()) {
		var x1 = x.next();
		ret.push(x1);
	}
	return ret;
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
Case14.main();
})();
